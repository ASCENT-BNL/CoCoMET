window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "CoMET", "modulename": "CoMET", "kind": "module", "doc": "<p style=\"text-align: center\">===============Welcome To CoMET===============</p>\n\n<p style=\"text-align: center\">A toolkit of the Advanced Study of Cloud and Environment iNTerations (ASCENT) program.</p>\n\n<p style=\"text-align: center\">This project was supported by the U.S. Department of Energy (DOE) Early Career Research Program, Atmospheric System Research (ASR) program, and the Office of Workforce Development for Teachers and Scientists (WDTS) under the Science Undergraduate Laboratory Internships Program (SULI).</p>\n\n<p style=\"text-align: center\">If you are using this software for a publication, please cite: ####</p>\n\n<p style=\"text-align: center\">=============================================</p>\n"}, {"fullname": "CoMET.analysis", "modulename": "CoMET.analysis", "kind": "module", "doc": "<p>Created on Thu Jun 20 15:35:32 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.analysis.analysis_object", "modulename": "CoMET.analysis.analysis_object", "kind": "module", "doc": "<p>Created on Mon Jul 22 11:03:37 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.analysis.analysis_object.Analysis_Object", "modulename": "CoMET.analysis.analysis_object", "qualname": "Analysis_Object", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "CoMET.analysis.analysis_object.Analysis_Object.__init__", "modulename": "CoMET.analysis.analysis_object", "qualname": "Analysis_Object.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tracking_xarray</span>,</span><span class=\"param\">\t<span class=\"n\">segmentation_xarray</span>,</span><span class=\"param\">\t<span class=\"n\">UDAF_features</span>,</span><span class=\"param\">\t<span class=\"n\">UDAF_linking</span>,</span><span class=\"param\">\t<span class=\"n\">UDAF_segmentation_2d</span>,</span><span class=\"param\">\t<span class=\"n\">UDAF_segmentation_3d</span></span>)</span>"}, {"fullname": "CoMET.analysis.analysis_object.Analysis_Object.tracking_xarray", "modulename": "CoMET.analysis.analysis_object", "qualname": "Analysis_Object.tracking_xarray", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CoMET.analysis.analysis_object.Analysis_Object.segmentation_xarray", "modulename": "CoMET.analysis.analysis_object", "qualname": "Analysis_Object.segmentation_xarray", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CoMET.analysis.analysis_object.Analysis_Object.UDAF_features", "modulename": "CoMET.analysis.analysis_object", "qualname": "Analysis_Object.UDAF_features", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CoMET.analysis.analysis_object.Analysis_Object.UDAF_linking", "modulename": "CoMET.analysis.analysis_object", "qualname": "Analysis_Object.UDAF_linking", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CoMET.analysis.analysis_object.Analysis_Object.UDAF_segmentation_2d", "modulename": "CoMET.analysis.analysis_object", "qualname": "Analysis_Object.UDAF_segmentation_2d", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CoMET.analysis.analysis_object.Analysis_Object.UDAF_segmentation_3d", "modulename": "CoMET.analysis.analysis_object", "qualname": "Analysis_Object.UDAF_segmentation_3d", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CoMET.analysis.analysis_object.Analysis_Object.return_analysis_dictionary", "modulename": "CoMET.analysis.analysis_object", "qualname": "Analysis_Object.return_analysis_dictionary", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calc_var", "modulename": "CoMET.analysis.calc_var", "kind": "module", "doc": "<p>Created on Mon Jun 24 12:17:45 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.analysis.calc_var.calc_var", "modulename": "CoMET.analysis.calc_var", "qualname": "calc_var", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>analysis_object : Analysis_Object\n    The output of CoMET_start and/or an object generated by create_analysis_object following CoMET-UDAF Specification 1.x.\nvar : str\n    Which variable to calculate. See list below.\n**args : dict\n    The additional arguments of indeterminate length required for calculating request variables.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if invalid variable name.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Type depends on variable\n    N/A.</p>\n\n<h2 id=\"valid-variables\">Valid Variables</h2>\n\n<p>\"var_max_height\",\n\"area\",\n\"volume\",\n\"merge_split\",\n\"arm\",\n\"convective_indices\"</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">analysis_object</span><span class=\"p\">:</span> <span class=\"n\">CoMET</span><span class=\"o\">.</span><span class=\"n\">analysis</span><span class=\"o\">.</span><span class=\"n\">analysis_object</span><span class=\"o\">.</span><span class=\"n\">Analysis_Object</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_arm_products", "modulename": "CoMET.analysis.calculate_arm_products", "kind": "module", "doc": "<p>Created on Tue Jul  2 09:55:18 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.analysis.calculate_arm_products.find_nearest", "modulename": "CoMET.analysis.calculate_arm_products", "qualname": "find_nearest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">pivot</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_arm_products.extract_arm_product", "modulename": "CoMET.analysis.calculate_arm_products", "qualname": "extract_arm_product", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>analysis_object : dict\n    A CoMET-UDAF standard analysis object containing at least UDAF_tracks.\npath_to_files : str\n    A glob-like path to the ARM product output.\nvariable_name : list[str]\n    Case sensitive name of variable you want to extract from the ARM data</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>output_data : xarray.core.dataset.Dataset\n    An xarray Dataset with the following: frame, tracking_time, arm_time, time_delta, closest_feature_id (km), variable_names list</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">analysis_object</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">path_to_files</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">variable_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_arm_products.calculate_convective_indices", "modulename": "CoMET.analysis.calculate_arm_products", "qualname": "calculate_convective_indices", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>analysis_object : dict\n    A CoMET-UDAF standard analysis object containing at least UDAF_tracks.\npath_to_files : str\n    A glob-like path to the INTERPSONDE ARM product output.\n**args : dict\n    Parameters to pass to the calculations of convective initation properties..</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>sonde_output_indices_data : xarray.core.dataset.Dataset\n    An xarray Dataset with the following: sonde_time, ...</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">analysis_object</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">path_to_files</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">,</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_bulk_cell_statistics", "modulename": "CoMET.analysis.calculate_bulk_cell_statistics", "kind": "module", "doc": "<p>Created on Fri Jun 28 15:00:59 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.analysis.calculate_bulk_cell_statistics.find_nearest", "modulename": "CoMET.analysis.calculate_bulk_cell_statistics", "qualname": "find_nearest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">pivot</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_bulk_cell_statistics.calculate_var_max_height", "modulename": "CoMET.analysis.calculate_bulk_cell_statistics", "qualname": "calculate_var_max_height", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>analysis_object : dict\n    A  CoMET-UDAF standard analysis object containing at least UDAF_tracks and UDAF_segmentation_2d or UDAF_segmentation_3d, and segmentation_xarray.\nthreshold : float\n    The value which needs to be exceeded to count towards the var top height. I.e. 15 for reflectivity.\nvariable : str, optional\n    The variable from the input segmentation_xarray which should be used for calculating var_max_height. The default is None.\ncell_footprint_height : float, optional\n    The height used to calculate the cell area to determine where to calculate var_max_heights. The default is 2km.\nquantile : float, optional\n    The percentile of calculated max heights to return. The default is 0.95.\n**args : dict\n    Throw away inputs.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing segmentation data from the analysis object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pandas.core.frame.DataFrame\n    A pandas dataframe with the following rows: frame, feature_id, cell_id, eth where eth is in km.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">analysis_object</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cell_footprint_height</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">quantile</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.95</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_bulk_cell_statistics.calculate_area", "modulename": "CoMET.analysis.calculate_bulk_cell_statistics", "qualname": "calculate_area", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>analysis_object : dict\n    A CoMET-UDAF standard analysis object containing at least UDAF_tracks and UDAF_segmentation_2d or UDAF_segmentation_3d.\nheight : float, optional\n    The height which is used to calculate the area of cells. The default is 2km.\nvariable : str, optional\n    Variable to which we should apply the threshold. The default is None.\nthreshold : float, optional\n    Value of which the area should be greater than. The default is None.\n**args : dict\n    Throw away variables.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing segmentation input from the analysis object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pandas.core.frame.DataFrame\n    A pandas dataframe with the following rows: frame, feature_id, cell_id, area where area is in km^2.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">analysis_object</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_bulk_cell_statistics.calculate_volume", "modulename": "CoMET.analysis.calculate_bulk_cell_statistics", "qualname": "calculate_volume", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>analysis_object : dict\n    A CoMET-UDAF standard analysis object containing at least UDAF_tracks and UDAF_segmentation_3d.\nvariable : str, optional\n    Variable to which we should apply the threshold. The default is None.\nthreshold : float, optional\n    Value of which the area should be greater than. The default is None.\n**args : dict\n    Throw away variables.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing segmentation input from the analysis object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pandas.core.frame.DataFrame\n    A pandas dataframe with the following rows: frame, feature_id, cell_id, volume where area is in km^3.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">analysis_object</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_convective_properties", "modulename": "CoMET.analysis.calculate_convective_properties", "kind": "module", "doc": "<p>Created on Thu Jul 11 11:23:21 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.analysis.calculate_convective_properties.find_closest", "modulename": "CoMET.analysis.calculate_convective_properties", "qualname": "find_closest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_convective_properties.calc_tv", "modulename": "CoMET.analysis.calculate_convective_properties", "qualname": "calc_tv", "kind": "function", "doc": "<p>Virt. pot. temp. of environment</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span>, </span><span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_convective_properties.calc_r", "modulename": "CoMET.analysis.calculate_convective_properties", "qualname": "calc_r", "kind": "function", "doc": "<h1 id=\"water-vapor-mixing-ratio-kg-kg-1\">Water vapor mixing ratio [kg kg-1]</h1>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">e</span>, </span><span class=\"param\"><span class=\"n\">p</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_convective_properties.calc_es", "modulename": "CoMET.analysis.calculate_convective_properties", "qualname": "calc_es", "kind": "function", "doc": "<h1 id=\"vapor-pressure-mangus-equation-pa\">Vapor pressure - Mangus equation [Pa]</h1>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_convective_properties.calc_shear", "modulename": "CoMET.analysis.calculate_convective_properties", "qualname": "calc_shear", "kind": "function", "doc": "<p>wind shear (vector)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wspd</span>, </span><span class=\"param\"><span class=\"n\">wdir</span>, </span><span class=\"param\"><span class=\"n\">alt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_convective_properties.calc_speed_shear", "modulename": "CoMET.analysis.calculate_convective_properties", "qualname": "calc_speed_shear", "kind": "function", "doc": "<p>wind speed shear</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wspd</span>, </span><span class=\"param\"><span class=\"n\">alt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_convective_properties.calc_midlevel_rh", "modulename": "CoMET.analysis.calculate_convective_properties", "qualname": "calc_midlevel_rh", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rh</span>, </span><span class=\"param\"><span class=\"n\">alt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_convective_properties.calc_lowlevel_rh", "modulename": "CoMET.analysis.calculate_convective_properties", "qualname": "calc_lowlevel_rh", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rh</span>, </span><span class=\"param\"><span class=\"n\">alt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_convective_properties.calc_richardson", "modulename": "CoMET.analysis.calculate_convective_properties", "qualname": "calc_richardson", "kind": "function", "doc": "<p>Bulk Richardson Number\nbuoyancy / wind shear\nBuoyancy tends to suppress turbulence, while the wind shear tends to generate turbulence mechanically.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">theta_v</span>, </span><span class=\"param\"><span class=\"n\">u</span>, </span><span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">alt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_convective_properties.calc_elr", "modulename": "CoMET.analysis.calculate_convective_properties", "qualname": "calc_elr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">alt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.calculate_convective_properties.calculate_interp_sonde_convective_properties", "modulename": "CoMET.analysis.calculate_convective_properties", "qualname": "calculate_interp_sonde_convective_properties", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>sonde : xarray.core.dataset.Dataset\n    Input data from INTERPSONDE ARM VAP at one time index.\nparcel : int, optional\n    Whether to use 1 - Surface, 2 - Mixed-Layer, or 3 - Most Unstable parcel. The default is 3.\nml_depth : float, optional\n    Depth of mixed-layer [meters] (when parcel = 2). The default is 482.\nmu_depth : float, optional\n    Look below this pressure level for MU parcel [hPa] (when parcel = 3). The default is 700.0.\nstart : int, optional\n    Index to start at for determining parcel properties (e.g. 1 = z(1)).. The default is 0.\nflag_heat : int, optional\n    Latent heating only due to liquid or liquid and ice? 1 - Liquid only / 2 - Liquid and Ice. The default is 2.\nflag_convert : int, optional\n    Convert pre-existing cloud water to cloud ice? 0 = No / 1 - Yes (using linear function of temperature) Requires flag_adiabat = 2 below (so we have hydrometeors to freeze). The default is 0.\nflag_adiabat : int, optional\n    Reversible or Irreversible parcel path? 1 - Pseudoadiabatic (Irreversible) / 2 - Moist Adiabatic (Reversible). The default is 1.\n**args : dict\n    Throw away params.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    TBD.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>results : dict\n    Dictionary of all convective properties (CAPE, CIN, etc.).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sonde</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">parcel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">ml_depth</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">482</span>,</span><span class=\"param\">\t<span class=\"n\">mu_depth</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">700.0</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">flag_heat</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">flag_convert</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">flag_adiabat</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.merge_split_detection", "modulename": "CoMET.analysis.merge_split_detection", "kind": "module", "doc": "<p>Created on Thu Jul 11 19:37:09 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.analysis.merge_split_detection.find_nearest", "modulename": "CoMET.analysis.merge_split_detection", "qualname": "find_nearest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">pivot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.analysis.merge_split_detection.merge_split_tracking", "modulename": "CoMET.analysis.merge_split_detection", "qualname": "merge_split_tracking", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>analysis_object : dict\n    A  CoMET-UDAF standard analysis object containing at least segmentation_xarray, UDAF_tracks. and UDAF_segmentation_2d or UDAF_segmentation_3d, and segmentation_xarray.\nvariable : str\n    The variable which defines the background field.\ninvert : bool, optional\n    If we care about tracking lower values such as brightness temperature (i.e. we want to flood fill stuff less than a threshold), we need to invert the data so we can use the same algorithm. Will also invert background value. The default is False.\ncell_footprint_height : float, optional\n    The height at which we want to find the newly calculated cell areas in kilometers. The default is 2km.\ntouching_threshold : float, optional\n    The percentage of cell border which must be shared by two cells. The default is 0.20.\nflood_background : float, optional\n    The minimum background value for area calculation. The default is 20.\nscore_threshold : float, optional\n    The minimum value of the score function to be considered a part of the cell. The default is 0.\nscore_weight_1 : float, optional\n    The weighting of the relative strength of the cell. The default is 1.\nscore_weight_2 : float, optional\n    The weighting of the relative distance of the cell. The default is 1.\nradius_multiplyer : float, optional\n    The multiplyer to increase the search radius by. Is equal to 1 + radius_multiplyer. The default is 0.1.\noverlap_threshold : float, optional\n    The amount two cells need to overlap [0 to 1]. The default is 0.5.\nsteps_forward_back : int, optional\n    The number of steps to look forward or back to detect mergers/splitters. The default is 2.\n**args : dict\n    Throw away params.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing segmentation input.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>merged_df : pandas.core.frame.DataFrame\n    A pandas dataframe with these columns: frame, parent_cells, merged_cell\nsplit_df : pandas.core.frame.DataFrame\n    A pandas dataframe with these columns: frame, split_cell, child_cells</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">analysis_object</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">invert</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cell_footprint_height</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">touching_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">flood_background</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">score_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">score_weight_1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">score_weight_2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">radius_multiplyer</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">overlap_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">steps_forward_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.goes_load", "modulename": "CoMET.goes_load", "kind": "module", "doc": "<p>Created on Thur Jun 13 11:33:16 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.goes_load.calc_latlon", "modulename": "CoMET.goes_load", "qualname": "calc_latlon", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>ds : xr.Dataset\n    xarray Dataset of the GOES data.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>ds : TYPE\n    xarray Dataset of the GOES data with added lat/lon data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.goes_load.goes_load_netcdf_iris", "modulename": "CoMET.goes_load", "qualname": "goes_load_netcdf_iris", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>path_to_files : str\n    Glob path to input files i.e. \"/data/usr/GOES/*.nc\".\ntracking_var : str\n    [\"tb\"], variable which is going to be used for tracking--brightness temperature..\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing GOES field on CONFIG or invalid tracking variable entered.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube continaing birhtness temperature ready for tobac tracking.\ngoes_xarray : xarray.core.dataarray.DataArray\n    Xarray DataArray containing GOES brightness temperature data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path_to_files</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span><span class=\"p\">,</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.goes_load.goes_load_netcdf", "modulename": "CoMET.goes_load", "qualname": "goes_load_netcdf", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>path_to_files : str\n    Glob path to input files i.e. \"/data/usr/GOES/*.nc\".\ntracking_var : str\n    [\"tb\"], variable which is going to be used for tracking--brightness temperature..\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing GOES field on CONFIG or invalid tracking variable entered.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>goes_xarray : xarray.core.dataarray.DataArray\n    Xarray DataArray containing GOES brightness temperature data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path_to_files</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.goes_tobac", "modulename": "CoMET.goes_tobac", "kind": "module", "doc": "<p>Created on Thu Jun 13 16:05:16 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.goes_tobac.goes_tobac_feature_id", "modulename": "CoMET.goes_tobac", "qualname": "goes_tobac_feature_id", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>goes_geopd : geopandas.geodataframe.GeoDataFrame\n    Geodataframe containing all default tobac feature id outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.goes_tobac.goes_tobac_linking", "modulename": "CoMET.goes_tobac", "qualname": "goes_tobac_linking", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nradar_features : geopandas.geodataframe.GeoDataFrame\n    tobac radar features from goes_tobac_feature_id output.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>goes_geopd_tracks : geopandas.geodataframe.GeoDataFrame\n    Geodataframe containing all default tobac feature id outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">radar_features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.goes_tobac.goes_tobac_segmentation", "modulename": "CoMET.goes_tobac", "qualname": "goes_tobac_segmentation", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nradar_features : geopandas.geodataframe.GeoDataFrame\n    tobac radar features from goes_tobac_feature_id output.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if using invalid tracking variable.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>segment_xarray : xarray.core.dataarray.DataArray\n    Xarray DataArray containing default tobac segmented data.\nsegment_pd : geopandas.geodataframe.GeoDataFrame\n    Geodataframe with ncells row.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">radar_features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">,</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.mesonh_calculate_products", "modulename": "CoMET.mesonh_calculate_products", "kind": "module", "doc": "<p>Created on Mon Jul  8 17:18:18 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.mesonh_calculate_products.mesonh_calculate_reflectivity", "modulename": "CoMET.mesonh_calculate_products", "qualname": "mesonh_calculate_reflectivity", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>mesonh_xarray : xarray.core.dataset.Dataset\n    Xarray Dataset containing default MesoNH values.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dBZ : xarray.core.dataarray.DataArray\n    DataArray containing calculated reflectivity values.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mesonh_xarray</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.mesonh_calculate_products.mesonh_calculate_brightness_temp", "modulename": "CoMET.mesonh_calculate_products", "qualname": "mesonh_calculate_brightness_temp", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>mesonh_xarray : xarray.core.dataset.Dataset\n    Xarray Dataset containing default MesoNH values.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TB : numpy.ndarray\n    Numpy array containing brightness temperature at each point and time--same dimension as input.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mesonh_xarray</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.mesonh_calculate_products.mesonh_calculate_agl_z", "modulename": "CoMET.mesonh_calculate_products", "qualname": "mesonh_calculate_agl_z", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>mesonh_xarray : xr.Dataset\n    Xarray Dataset containing default MesoNH values.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>geopt : xarray.core.dataarray.DataArray\n    Dataarray of heights AGL in m.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mesonh_xarray</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.mesonh_load", "modulename": "CoMET.mesonh_load", "kind": "module", "doc": "<p>Created on Fri Jun 21 18:01:16 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.mesonh_load.guess_horizontal_spacing", "modulename": "CoMET.mesonh_load", "qualname": "guess_horizontal_spacing", "kind": "function", "doc": "<p>This functions attempts to find the horizontal spacing of MesoNH data</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>mesonh_xarray : xarray.core.dataset.Dataset\n    Standard mesonh xarray dataset.\nfilename : str\n    The name of a mesonh input file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dy : float\n    Estimated y spacing (m).\ndx : float\n    Estimated x spacing (m).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mesonh_xarray</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.mesonh_load.mesonh_load_netcdf_iris", "modulename": "CoMET.mesonh_load", "qualname": "mesonh_load_netcdf_iris", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>filepath : str\n    Glob style path to MesoNH files (i.e. ./data/MesoNH/500m*).\ntracking_var : str\n    [\"dbz\",\"tb\",\"wa\", \"pr\", ...], variable which is going to be used for tracking\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if entered invalid tracking variable.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing tracking variable.\nmesonh_xarray : xarray.core.dataset.Dataset\n    Xarray dataset containing merged MesoNH data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span><span class=\"p\">,</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.mesonh_load.mesonh_load_netcdf", "modulename": "CoMET.mesonh_load", "qualname": "mesonh_load_netcdf", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>filepath : str\n    Glob style path to MesoNH files (i.e. ./data/MesoNH/500m*).\ntracking_var : str\n    [\"dbz\",\"tb\",\"wa\", \"pr\", ...], variable which is going to be used for tracking\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if entered invalid tracking variable.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>mesonh_xarray : xarray.core.dataset.Dataset\n    Xarray dataset containing merged MesoNH data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.mesonh_moaap", "modulename": "CoMET.mesonh_moaap", "kind": "module", "doc": "<p>Created on Wed Jul 17 14:14:14 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.mesonh_moaap.find_nearest", "modulename": "CoMET.mesonh_moaap", "qualname": "find_nearest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">pivot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.mesonh_moaap.mesonh_run_moaap", "modulename": "CoMET.mesonh_moaap", "qualname": "mesonh_run_moaap", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>mesonh_xarray : xarray.core.dataset.Dataset\n    xarray Dataset containing MesoNH data calculated from mesonh_load.py.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>mask_file : xarray.core.dataset.Dataset\n    Default MOAAP output mask.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mesonh_xarray</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.mesonh_tobac", "modulename": "CoMET.mesonh_tobac", "kind": "module", "doc": "<p>Created on Tue Jul  9 15:41:26 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.mesonh_tobac.find_nearest", "modulename": "CoMET.mesonh_tobac", "qualname": "find_nearest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">pivot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.mesonh_tobac.mesonh_tobac_feature_id", "modulename": "CoMET.mesonh_tobac", "qualname": "mesonh_tobac_feature_id", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if out-of-bounds height.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>mesonh_geopd : geopandas.geodataframe.GeoDataFrame\n    Geodataframe containing all default tobac feature id outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.mesonh_tobac.mesonh_tobac_linking", "modulename": "CoMET.mesonh_tobac", "qualname": "mesonh_tobac_linking", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nradar_features : gpd.GeoDataFrame\n    Tobac radar features from mesonh_tobac_feature_id output.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>mesonh_geopd_tracks : geopandas.geodataframe.GeoDataFrame\n    Geodataframe containing all default tobac tracking outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">radar_features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.mesonh_tobac.mesonh_tobac_segmentation", "modulename": "CoMET.mesonh_tobac", "qualname": "mesonh_tobac_segmentation", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nradar_features : gpd.GeoDataFrame\n    tobac radar features from mesonh_tobac_feature_id output.\nsegmentation_type : str\n    [\"2D\", \"3D\"], whether to perform 2d segmentation or 3d segmentation.\nCONFIG : dict\n    User configuration file.\nsegmentation_height : float, optional\n    Height, in kilometers, to perform the updraft or reflectivity segmentation if 2d selected and tracking_var is 3D. The default is None.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception for invalid segmentation type or height.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>segment_xarray : xarray.core.dataarray.DataArray\n    Xarray DataArray containing default tobac segmented data.\nsegment_pd : geopandas.geodataframe.GeoDataFrame\n    Geodataframe with ncells row.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">radar_features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">segmentation_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">segmentation_height</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">,</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.multi_nexrad_load", "modulename": "CoMET.multi_nexrad_load", "kind": "module", "doc": "<p>Created on Mon Jul 15 11:57:43 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.multi_nexrad_load.find_nearest", "modulename": "CoMET.multi_nexrad_load", "qualname": "find_nearest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">pivot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.multi_nexrad_load.gen_and_save_multi_nexrad_grid", "modulename": "CoMET.multi_nexrad_load", "qualname": "gen_and_save_multi_nexrad_grid", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>paths_to_files : list[str]\n    Array of glob path to archival NEXRAD level 2 input files--i.e. [\"/data/usr/KVNX<em>_V06.ar2v\", \"/data/usr/KIVX</em>_V06.ar2v\"].\nsave_location : str\n    Path to where the gridded NEXRAD files should be saved to, should be a directory and end with \"/\".\ntracking_var : str\n    [\"dbz\"], variable which is going to be used for tracking--reflectivity.\nCONFIG : dict\n    User configuration file.\nparallel_processing : bool, optional\n    Bool determinig whether to use parallel processing when gridding files. The default is False.\nmax_cores : int, optional\n    Number of cores to use if parallel_processing == True. The default is None.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if there are no files to grid or invalid tracking variable entered.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">paths_to_files</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">save_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">parallel_processing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.multi_nexrad_load.parallel_save_grid", "modulename": "CoMET.multi_nexrad_load", "qualname": "parallel_save_grid", "kind": "function", "doc": "<p>Helper function for multi-processing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ii</span>, </span><span class=\"param\"><span class=\"n\">save_location</span>, </span><span class=\"param\"><span class=\"n\">radar_list</span>, </span><span class=\"param\"><span class=\"n\">radar_time_list</span>, </span><span class=\"param\"><span class=\"n\">CONFIG</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.multi_nexrad_load.multi_nexrad_load_netcdf_iris", "modulename": "CoMET.multi_nexrad_load", "qualname": "multi_nexrad_load_netcdf_iris", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>paths_to_files : list[str] | str\n    Array of glob path to input files, either archival or grided netcdf--i.e. [\"/data/usr/KVNX<em>_V06.ar2v\", \"/data/usr/KIVX</em>_V06.ar2v\"]. ONLY AN ARRAY WHEN NOT GRIDDED YET.\nfile_type : str\n    [\"ar2v\", \"nc\"] type of input file--either archival or netcdf.\ntracking_var : str\n    [\"dbz\"], variable which is going to be used for tracking--reflectivity.\nCONFIG : dict\n    User configuration file.\nsave_location : str, optional\n    Where to save gridded NEXRAD data to if file_type==\"ar2v\". The default is None.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing MULTI-NEXRAD field in CONFIG, invalid tracking variable, and/or invalid file type.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>nexrad_cube : iris.cube.Cube\n    Iris cube continaing gridded reflectivity data ready for tobac tracking.\nnexrad_xarray : xarray.core.dataarray.DataArray\n    Xarray DataArray containing gridded NEXRAD archival data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">paths_to_files</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span><span class=\"p\">,</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.multi_nexrad_load.multi_nexrad_load_netcdf", "modulename": "CoMET.multi_nexrad_load", "qualname": "multi_nexrad_load_netcdf", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>paths_to_files : list[str] | str\n    Array of glob path to input files, either archival or grided netcdf--i.e. [\"/data/usr/KVNX<em>_V06.ar2v\", \"/data/usr/KIVX</em>_V06.ar2v\"]. ONLY AN ARRAY WHEN NOT GRIDDED YET.\nfile_type : str\n    [\"ar2v\", \"nc\"] type of input file--either archival or netcdf.\ntracking_var : str\n    [\"dbz\"], variable which is going to be used for tracking--reflectivity.\nCONFIG : dict\n    User configuration file.\nsave_location : str, optional\n    Where to save gridded NEXRAD data to if file_type==\"ar2v\". The default is None.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing MULTI-NEXRAD field in CONFIG, invalid tracking variable, and/or invalid file type.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>nexrad_xarray : xarray.core.dataarray.DataArray\n    Xarray DataArray containing gridded NEXRAD archival data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">paths_to_files</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.multi_nexrad_tobac", "modulename": "CoMET.multi_nexrad_tobac", "kind": "module", "doc": "<p>Created on Tue Jul 16 10:25:47 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.multi_nexrad_tobac.find_nearest", "modulename": "CoMET.multi_nexrad_tobac", "qualname": "find_nearest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">pivot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.multi_nexrad_tobac.multi_nexrad_tobac_feature_id", "modulename": "CoMET.multi_nexrad_tobac", "qualname": "multi_nexrad_tobac_feature_id", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if height is out of bounds.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>nexrad_geopd : geopandas.geodataframe.GeoDataFrame\n    Geodataframe containing all default tobac feature id outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.multi_nexrad_tobac.multi_nexrad_tobac_linking", "modulename": "CoMET.multi_nexrad_tobac", "qualname": "multi_nexrad_tobac_linking", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nradar_features : gpd.GeoDataFrame\n    tobac radar features from nexrad_tobac_feature_id output.\nCONFIG : dict\n    Geodataframe containing all default tobac feature id outputs.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>nexrad_geopd_tracks : geopandas.geodataframe.GeoDataFrame\n    Default tobac linking outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">radar_features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.multi_nexrad_tobac.multi_nexrad_tobac_segmentation", "modulename": "CoMET.multi_nexrad_tobac", "qualname": "multi_nexrad_tobac_segmentation", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nradar_features : geopandas.geodataframe.GeoDataFrame\n    tobac radar features from multi_nexrad_tobac_feature_id output.\nsegmentation_type : str\n    [\"2D\", \"3D\"], whether to perform 2d segmentation or 3d segmentation.\nCONFIG : dict\n    User configuration file.\nsegmentation_height : float, optional\n    Height, in kilometers, to perform the updraft or reflectivity segmentation if 2d selected. The default is None.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception for invalid segmentation type or height.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>segment_xarray : xarray.core.dataarray.DataArray\n    Xarray DataArray containing default tobac segmented data.\nsegment_pd : geopandas.geodataframe.GeoDataFrame\n    Geodataframe with ncells row.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">radar_features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">segmentation_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">segmentation_height</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">,</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.nexrad_load", "modulename": "CoMET.nexrad_load", "kind": "module", "doc": "<p>Created on Mon Jun 10 16:28:49 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.nexrad_load.gen_and_save_nexrad_grid", "modulename": "CoMET.nexrad_load", "qualname": "gen_and_save_nexrad_grid", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>path_to_files : str\n    Glob type path to the NEXRAD level 2 archive files.\nsave_location : str\n    Path to where the gridded NEXRAD files should be saved to, should be a directory and end with \"/\".\ntracking_var : str\n    [\"dbz\"], variable which is going to be used for tracking--reflectivity.\nCONFIG : dict\n    User configuration file.\nparallel_processing : bool, optional\n    Bool determinig whether to use parallel processing when gridding files. The default is False.\nmax_cores : int, optional\n    Number of cores to use if parallel_processing == True. The default is None.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if no files to grid or invalid tracking variables.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path_to_files</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">save_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">parallel_processing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.nexrad_load.create_and_save_grid_single", "modulename": "CoMET.nexrad_load", "qualname": "create_and_save_grid_single", "kind": "function", "doc": "<p>Helper Function for Parallel Processing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span>, </span><span class=\"param\"><span class=\"n\">save_location</span>, </span><span class=\"param\"><span class=\"n\">tracking_var</span>, </span><span class=\"param\"><span class=\"n\">CONFIG</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.nexrad_load.gen_and_save_nexrad_grid_multi", "modulename": "CoMET.nexrad_load", "qualname": "gen_and_save_nexrad_grid_multi", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>files : list[str]\n    List containing all paths to NEXRAD level 2 archive files.\nsave_location : str\n    Path to where the gridded NEXRAD files should be saved to.\ntracking_var : str\n    [\"dbz\"], variable which is going to be used for tracking--reflectivity.\nCONFIG : dict\n    User configuration file.\nmax_cores : int\n    Number of cores to use for parallel processing</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">save_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">max_cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.nexrad_load.nexrad_load_netcdf_iris", "modulename": "CoMET.nexrad_load", "qualname": "nexrad_load_netcdf_iris", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>path_to_files : str\n    Glob path to input files, either archival or grided netcdf--i.e. \"/data/usr/KVNX*_V06.ar2v\".\nfile_type : str\n    [\"ar2v\", \"nc\"] type of input file--either archival or netcdf.\ntracking_var : str\n    [\"dbz\"], variable which is going to be used for tracking--reflectivity.\nCONFIG : dict\n    User configuration file.\nsave_location : str, optional\n    Where to save gridded NEXRAD data to if file_type==\"ar2v\". The default is None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube continaing gridded reflectivity data ready for tobac tracking.\nnexrad_xarray : xarray.core.dataarray.DataArray\n    Xarray DataArray containing gridded NEXRAD archival data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path_to_files</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span><span class=\"p\">,</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.nexrad_load.nexrad_load_netcdf", "modulename": "CoMET.nexrad_load", "qualname": "nexrad_load_netcdf", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>path_to_files : str\n    Glob path to input files, either archival or grided netcdf--i.e. \"/data/usr/KVNX*_V06.ar2v\".\nfile_type : str\n    [\"ar2v\", \"nc\"] type of input file--either archival or netcdf.\ntracking_var : str\n    [\"dbz\"], variable which is going to be used for tracking--reflectivity.\nCONFIG : dict\n    User configuration file.\nsave_location : str, optional\n    Where to save gridded NEXRAD data to if file_type==\"ar2v\". The default is None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>nexrad_xarray : xarray.core.dataarray.DataArray\n    Xarray DataArray containing gridded NEXRAD archival data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path_to_files</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.nexrad_tobac", "modulename": "CoMET.nexrad_tobac", "kind": "module", "doc": "<p>Created on Tue Jun 11 17:36:27 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.nexrad_tobac.find_nearest", "modulename": "CoMET.nexrad_tobac", "qualname": "find_nearest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">pivot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.nexrad_tobac.nexrad_tobac_feature_id", "modulename": "CoMET.nexrad_tobac", "qualname": "nexrad_tobac_feature_id", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception for out of bound heights.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>nexrad_geopd : geopandas.geodataframe.GeoDataFrame\n    geodataframe containing all default tobac feature id outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.nexrad_tobac.nexrad_tobac_linking", "modulename": "CoMET.nexrad_tobac", "qualname": "nexrad_tobac_linking", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nradar_features : gpd.GeoDataFrame\n    tobac radar features from nexrad_tobac_feature_id output.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>nexrad_geopd_tracks : gpd.GeoDataFrame\n    Geodataframe containing all default tobac feature id outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">radar_features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.nexrad_tobac.nexrad_tobac_segmentation", "modulename": "CoMET.nexrad_tobac", "qualname": "nexrad_tobac_segmentation", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nradar_features : geopandas.geodataframe.GeoDataFrame\n    tobac radar features from nexrad_tobac_feature_id output.\nsegmentation_type : str\n    [\"2D\", \"3D\"], whether to perform 2d segmentation or 3d segmentation.\nCONFIG : dict\n    User configuration file.\nsegmentation_height : float, optional\n    Height, in kilometers, to perform the updraft or reflectivity segmentation if 2d selected. The default is None.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception for invalid segmentation type or height.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>segment_xarray : xarray.core.dataarray.DataArray\n    Xarray DataArray containing default tobac segmented data.\nsegment_pd : geopandas.geodataframe.GeoDataFrame\n    Geodataframe with ncells row.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">radar_features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">segmentation_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">segmentation_height</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">,</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.standard_radar_load", "modulename": "CoMET.standard_radar_load", "kind": "module", "doc": "<p>Created on Thu Jul 18 12:19:18 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.standard_radar_load.standard_radar_load_netcdf_iris", "modulename": "CoMET.standard_radar_load", "qualname": "standard_radar_load_netcdf_iris", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>path_to_files : str\n    Glob path to gridded input netcdf files--i.e. \"/data/usr/KVNX*_V06.nc\".\ntracking_var : str\n    [\"dbz\"], variable which is going to be used for tracking--reflectivity..\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if CONFIG missing standard_radar field or invalid tracking variable entered.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>radar_cube : iris.cube.Cube\n    Iris cube continaing gridded reflectivity data ready for tobac tracking.\nradar_xarray : xarray.core.dataarray.DataArray\n    Xarray DataArray containing gridded reflectivity data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path_to_files</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span><span class=\"p\">,</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.standard_radar_load.standard_radar_load_netcdf", "modulename": "CoMET.standard_radar_load", "qualname": "standard_radar_load_netcdf", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>path_to_files : str\n    Glob path to gridded input netcdf files--i.e. \"/data/usr/KVNX*_V06.nc\".\ntracking_var : str\n    [\"dbz\"], variable which is going to be used for tracking--reflectivity..\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if CONFIG missing standard_radar field or invalid tracking variable entered.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>radar_xarray : xarray.core.dataarray.DataArray\n    Xarray DataArray containing gridded reflectivity data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path_to_files</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.standard_radar_tobac", "modulename": "CoMET.standard_radar_tobac", "kind": "module", "doc": "<p>Created on Thu Jul 18 12:29:55 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.standard_radar_tobac.find_nearest", "modulename": "CoMET.standard_radar_tobac", "qualname": "find_nearest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">pivot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.standard_radar_tobac.standard_radar_tobac_feature_id", "modulename": "CoMET.standard_radar_tobac", "qualname": "standard_radar_tobac_feature_id", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception for out-of-bounds segmentation height.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>radar_geopd : geopandas.geodataframe.GeoDataFrame\n    Geodataframe containing all default tobac feature id outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.standard_radar_tobac.standard_radar_tobac_linking", "modulename": "CoMET.standard_radar_tobac", "qualname": "standard_radar_tobac_linking", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nradar_features : geopandas.geodataframe.GeoDataFrame\n    tobac radar features from standard_radar_tobac_feature_id output.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>radar_geopd_tracks : geopandas.geodataframe.GeoDataFrame\n    Geodataframe containing all default tobac feature id outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">radar_features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.standard_radar_tobac.standard_radar_tobac_segmentation", "modulename": "CoMET.standard_radar_tobac", "qualname": "standard_radar_tobac_segmentation", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nradar_features : geopandas.geodataframe.GeoDataFrame\n    tobac radar features from standard_radar_tobac_feature_id output.\nsegmentation_type : str\n    [\"2D\", \"3D\"], whether to perform 2d segmentation or 3d segmentation.\nCONFIG : dict\n    User configuration file.\nsegmentation_height : float | None, optional\n    Height, in kilometers, to perform the updraft or reflectivity segmentation if 2d selected. The default is None.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if out-of-bounds height or invalid tracking variable.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>segment_array : xarray.core.dataarray.DataArray\n    Xarray DataArray containing segmented data.\nsegment_features : geopandas.geodataframe.GeoDataFrame\n    Geodataframe with ncells row.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">radar_features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">segmentation_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">segmentation_height</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">,</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.tracker_output_translation_layer", "modulename": "CoMET.tracker_output_translation_layer", "kind": "module", "doc": "<p>Created on Mon Jun 24 12:34:22 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.tracker_output_translation_layer.feature_id_to_UDAF", "modulename": "CoMET.tracker_output_translation_layer", "qualname": "feature_id_to_UDAF", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>features : geopandas.geodataframe.GeoDataFrame\n    The output from the feature detection step of a given tracker.\ntracker : str\n    [\"tobac\"] The tracker used to generate the features.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if invalid tracker entered.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>UDAF_features : geopandas.geodataframe.GeoDataFrame\n    A geodataframe matching the format of the CoMET-UDAF feature detection specification.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">tracker</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.tracker_output_translation_layer.linking_to_UDAF", "modulename": "CoMET.tracker_output_translation_layer", "qualname": "linking_to_UDAF", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>tracks : geopandas.geodataframe.GeoDataFrame\n    The output from the linking/tracking step of a given tracker.\ntracker : str\n    [\"tobac\"] The tracker used to generate the links.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if invalid tracker entered.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>UDAF_tracks : geopandas.geodataframe.GeoDataFrame\n    A geodataframe matching the format of the CoMET-UDAF linking specification.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tracks</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">tracker</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.tracker_output_translation_layer.segmentation_to_UDAF", "modulename": "CoMET.tracker_output_translation_layer", "qualname": "segmentation_to_UDAF", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>segmentation : xarray.core.dataarray.DataArray\n    The output from the segmentation step of a given tracker.\nUDAF_tracks : geopandas.geodataframe.GeoDataFrame\n    UDAF standard tracking output.\ntracker : str\n    [\"tobac\"] The tracker used to generate the features.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if invalid tracker entered.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>xarray.core.dataset.Dataset\n    An xarray dataset matching the format of the CoMET-UDAF segmentation specification.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">segmentation</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>,</span><span class=\"param\">\t<span class=\"n\">UDAF_tracks</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">tracker</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.tracker_output_translation_layer.bulk_moaap_to_UDAF", "modulename": "CoMET.tracker_output_translation_layer", "qualname": "bulk_moaap_to_UDAF", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>mask : xarray.core.dataset.Dataset\n    An xarray file which is the default output from MOAAP and contains the mask information for all tracked types.\nprojection_x_coords : np.ndarray\n    Numpy array of projection x coordinates.\nprojection_y_coords : np.ndarray\n    Numpy array of projection y coordinates.\nconvert_type : str, optional\n    [\"MCS\", \"Cloud\"] The type of tracking data to extract. The default is \"cloud\".</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if invalid phenomena type entered.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>UDAF_features : geopandas.geodataframe.GeoDataFrame\n    Features geopandas dataframe following CoMET-UDAF specification.\nUDAF_linking : geopandas.geodataframe.GeoDataFrame\n    Linking geopandas dataframe following CoMET-UDAF specification.\nUDAF_segmentation_2d : xarray.core.dataset.Dataset\n    Segmentation xarray dataset following CoMET-UDAF specification.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mask</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">projection_x_coords</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">projection_y_coords</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">convert_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cloud&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span><span class=\"p\">,</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span><span class=\"p\">,</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.user_interface_layer", "modulename": "CoMET.user_interface_layer", "kind": "module", "doc": "<p>Created on Mon Jun 10 14:55:16 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.user_interface_layer.CoMET_start", "modulename": "CoMET.user_interface_layer", "qualname": "CoMET_start", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>path_to_config : str | None, optional\n    Path to a config.yml file containing all details of the CoMET run. See boilerplate.yml for how the file should be setup. The default is None.\nCONFIG : dict | None, optional\n    Optional to just pass a config dict object instead of filepath. The default is None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dict\n    Default CoMET output following CoMET-UDAF specification.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path_to_config</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.user_interface_layer.CoMET_load", "modulename": "CoMET.user_interface_layer", "qualname": "CoMET_load", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>path_to_config : str | None, optional\n    Path to a config.yml file containing all details of the CoMET run. See boilerplate.yml for how the file should be setup. The default is None.\nCONFIG_string : str | None, optional\n    String of yaml data if not using a file. The default is None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>CONFIG : dict\n    Dictionary object containing all user-defined parameters.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path_to_config</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.user_interface_layer.run_goes", "modulename": "CoMET.user_interface_layer", "qualname": "run_goes", "kind": "function", "doc": "<p>Inputs:\n    CONFIG: User configuration file\nOutputs:\n    user_return_dict: A dictionary object which contanis all tobac and CoMET-UDAF standard outputs</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.user_interface_layer.run_mesonh", "modulename": "CoMET.user_interface_layer", "qualname": "run_mesonh", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>CONFIG : dict\n    User configuration file.\nqueue : multiprocessing.queues.Queue | None, optional\n    Multiprocessing queue to pass the output dict to for parallelization. The default is None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>user_return_dict : dict\n    A dictionary object which contanis all tobac and CoMET-UDAF standard outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.user_interface_layer.run_multi_nexrad", "modulename": "CoMET.user_interface_layer", "qualname": "run_multi_nexrad", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>CONFIG : dict\n    User configuration file.\nqueue : multiprocessing.queues.Queue | None, optional\n    Multiprocessing queue to pass the output dict to for parallelization. The default is None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>user_return_dict : dict\n    A dictionary object which contanis all tobac and CoMET-UDAF standard outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.user_interface_layer.run_nexrad", "modulename": "CoMET.user_interface_layer", "qualname": "run_nexrad", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>CONFIG : dict\n    User configuration file.\nqueue : multiprocessing.queues.Queue | None, optional\n    Multiprocessing queue to pass the output dict to for parallelization. The default is None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>user_return_dict : dict\n    A dictionary object which contanis all tobac and CoMET-UDAF standard outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.user_interface_layer.run_standard_radar", "modulename": "CoMET.user_interface_layer", "qualname": "run_standard_radar", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>CONFIG : dict\n    User configuration file.\nqueue : multiprocessing.queues.Queue | None, optional\n    Multiprocessing queue to pass the output dict to for parallelization. The default is None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>user_return_dict : dict\n    A dictionary object which contanis all tobac and CoMET-UDAF standard outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.user_interface_layer.run_wrf", "modulename": "CoMET.user_interface_layer", "qualname": "run_wrf", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>CONFIG : dict\n    User configuration file.\nqueue : multiprocessing.queues.Queue | None, optional\n    Multiprocessing queue to pass the output dict to for parallelization. The default is None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>user_return_dict : dict\n    A dictionary object which contanis all tobac and CoMET-UDAF standard outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.user_utils", "modulename": "CoMET.user_utils", "kind": "module", "doc": "<p>Functions for use outside of CoMET. If the user wishes to implement custom functionality based on the CoMET methodologies, these functions help facilitate that.</p>\n"}, {"fullname": "CoMET.user_utils.bulk_statistics_funcs", "modulename": "CoMET.user_utils.bulk_statistics_funcs", "kind": "module", "doc": "<p>Created on Mon Aug  5 12:37:22 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.user_utils.bulk_statistics_funcs.area_func", "modulename": "CoMET.user_utils.bulk_statistics_funcs", "qualname": "area_func", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>segmentation_2d : xarray.core.dataarray.DataArray\n    2D Segmentation output with feature-wise labelling.\ntracks : geopandas.geodataframe.GeoDataFrame\n    UDAF_linking formated tracks from CoMET-like output.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing segmentation input from the analysis object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pandas.core.frame.DataFrame\n    A pandas dataframe with the following rows: frame, feature_id, cell_id, area where area is in km^2.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">segmentation_2d</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>,</span><span class=\"param\">\t<span class=\"n\">tracks</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.user_utils.bulk_statistics_funcs.volume_func", "modulename": "CoMET.user_utils.bulk_statistics_funcs", "qualname": "volume_func", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>segmentation_3d : xarray.core.dataarray.DataArray\n    3D Segmentation output with feature-wise labelling.\ntracks : geopandas.geodataframe.GeoDataFrame\n    UDAF_linking formated tracks from CoMET-like output.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing segmentation input from the analysis object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pandas.core.frame.DataFrame\n    A pandas dataframe with the following rows: frame, feature_id, cell_id, volume where area is in km^3.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">segmentation_3d</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>,</span><span class=\"param\">\t<span class=\"n\">tracks</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.user_utils.bulk_statistics_funcs.var_max_height_func", "modulename": "CoMET.user_utils.bulk_statistics_funcs", "qualname": "var_max_height_func", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>variable_field : xarray.core.dataarray.DataArray\n    An xarray DataArray that has the values you are interested in with an altitude coordinate.\ntracks : geopandas.geodataframe.GeoDataFrame\n    UDAF_linking formated tracks from CoMET-like output.\nsegmentation_2d : xarray.core.dataarray.DataArray\n    2D Segmentation output with feature-wise labelling.\nthreshold : float\n    The value which needs to be exceeded to count towards the var top height. I.e. 15 for reflectivity.\nquantile : float, optional\n    The percentile of calculated max heights to return. The default is 0.95.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing segmentation data from the analysis object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pandas.core.frame.DataFrame\n    A pandas dataframe with the following rows: frame, feature_id, cell_id, eth where eth is in km.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">variable_field</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>,</span><span class=\"param\">\t<span class=\"n\">tracks</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">segmentation_2d</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">quantile</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.95</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_calculate_products", "modulename": "CoMET.wrf_calculate_products", "kind": "module", "doc": "<p>Created on Wed Jul  3 11:01:10 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.wrf_calculate_products.wrf_calculate_reflectivity", "modulename": "CoMET.wrf_calculate_products", "qualname": "wrf_calculate_reflectivity", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>wrf_xarray : xarray.core.dataset.Dataset\n    Xarray Dataset containing default WRF values.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dBZ : xarray.core.dataarray.DataArray\n    DataArray containing calculated reflectivity values.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wrf_xarray</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_calculate_products.wrf_calculate_brightness_temp", "modulename": "CoMET.wrf_calculate_products", "qualname": "wrf_calculate_brightness_temp", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>wrf_xarray : xarray.core.dataset.Dataset\n    Xarray Dataset containing default WRF values.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TB : numpy.ndarray\n    Numpy array containing brightness temperature at each point and time--same dimension as input.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wrf_xarray</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_calculate_products.wrf_calculate_agl_z", "modulename": "CoMET.wrf_calculate_products", "qualname": "wrf_calculate_agl_z", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>wrf_xarray : xarray.core.dataset.Dataset\n    Xarray Dataset containing default WRF values.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>geopt : xarray.core.dataarray.DataArray\n    Dataarray of heights AGL.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wrf_xarray</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_calculate_products.wrf_calculate_wa", "modulename": "CoMET.wrf_calculate_products", "qualname": "wrf_calculate_wa", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>wrf_xarray : xarray.core.dataset.Dataset\n    Xarray Dataset containing default WRF values.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>wa : xarray.core.dataarray.DataArray\n    Dataarray of vertical wind components at mass points.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wrf_xarray</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_calculate_products.wrf_calculate_precip_rate", "modulename": "CoMET.wrf_calculate_products", "qualname": "wrf_calculate_precip_rate", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>wrf_xarray : xarray.core.dataset.Dataset\n    Xarray Dataset containing default WRF values.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>precip_rate : numpy.ndarray\n    Numpy array of precipitation rate in mm/hr.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wrf_xarray</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_load", "modulename": "CoMET.wrf_load", "kind": "module", "doc": "<p>Created on Wed Jun  5 15:19:26 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.wrf_load.wrf_load_netcdf_iris", "modulename": "CoMET.wrf_load", "qualname": "wrf_load_netcdf_iris", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>filepath : str\n    Glob style path to wrfout files (i.e. ./data/wrfout/wrfout_d03_*).\ntracking_var : str\n    [\"dbz\",\"tb\",\"wa\",\"pr\", \"...\"], variable which is going to be used for tracking.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing wrf field or invalid tracking variable entered.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing tracking variable data.\nwrf_xarray : xarray.core.dataset.Dataset\n    Xarray dataset containing merged WRF data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span><span class=\"p\">,</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_load.wrf_load_netcdf", "modulename": "CoMET.wrf_load", "qualname": "wrf_load_netcdf", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>filepath : str\n    Glob style path to wrfout files (i.e. ./data/wrfout/wrfout_d03_*).\ntracking_var : str\n    [\"dbz\",\"tb\",\"wa\",\"pr\", \"...\"], variable which is going to be used for tracking.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if missing wrf field or invalid tracking variable entered.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>wrf_xarray : xarray.core.dataset.Dataset\n    Xarray dataset containing merged WRF data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tracking_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_moaap", "modulename": "CoMET.wrf_moaap", "kind": "module", "doc": "<p>Created on Wed Jul 10 12:29:56 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.wrf_moaap.find_nearest", "modulename": "CoMET.wrf_moaap", "qualname": "find_nearest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">pivot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_moaap.wrf_run_moaap", "modulename": "CoMET.wrf_moaap", "qualname": "wrf_run_moaap", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>wrf_xarray : xarray.core.dataset.Dataset\n    Xarray Dataset containing WRF data calculated from wrf_load.py.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>mask_file : xarray.core.dataset.Dataset\n    The xarray object containing the default MOAAP outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wrf_xarray</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_tobac", "modulename": "CoMET.wrf_tobac", "kind": "module", "doc": "<p>Created on Wed Jun  5 17:26:17 2024</p>\n\n<p>@author: thahn</p>\n"}, {"fullname": "CoMET.wrf_tobac.find_nearest", "modulename": "CoMET.wrf_tobac", "qualname": "find_nearest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">pivot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_tobac.wrf_tobac_feature_id", "modulename": "CoMET.wrf_tobac", "qualname": "wrf_tobac_feature_id", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if out-of-bounds height.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>wrf_geopd : geopandas.geodataframe.GeoDataFrame\n    Geodataframe containing all default tobac feature id outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_tobac.wrf_tobac_linking", "modulename": "CoMET.wrf_tobac", "qualname": "wrf_tobac_linking", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nradar_features : gpd.GeoDataFrame\n    Tobac radar features from wrf_tobac_feature_id output.\nCONFIG : dict\n    User configuration file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>wrf_geopd_tracks : geopandas.geodataframe.GeoDataFrame\n    Geodataframe containing all default tobac tracking outputs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">radar_features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "CoMET.wrf_tobac.wrf_tobac_segmentation", "modulename": "CoMET.wrf_tobac", "qualname": "wrf_tobac_segmentation", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>cube : iris.cube.Cube\n    Iris cube containing the variable to be tracked.\nradar_features : gpd.GeoDataFrame\n    tobac radar features from wrf_tobac_feature_id output.\nsegmentation_type : str\n    [\"2D\", \"3D\"], whether to perform 2d segmentation or 3d segmentation.\nCONFIG : dict\n    User configuration file.\nsegmentation_height : float | None, optional\n    height, in meters, to perform the updraft or reflectivity segmentation if 2d selected and tracking_var is not 2D. The default is None.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>Exception\n    Exception if out-of-bounds height.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>segment_array : xarray.core.dataarray.DataArray\n    Xarray DataArray containing segmented data.\nsegment_features : geopandas.geodataframe.GeoDataFrame\n    Geodataframe with ncells column.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cube</span><span class=\"p\">:</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">Cube</span>,</span><span class=\"param\">\t<span class=\"n\">radar_features</span><span class=\"p\">:</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">segmentation_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">CONFIG</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">segmentation_height</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">,</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();